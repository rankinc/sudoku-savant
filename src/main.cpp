/*
 * Initial main.c file generated by Glade. Edit as required.
 * Glade will not overwrite this file.
 */

#ifdef HAVE_CONFIG_H
#  include <config.h>
#endif

#include <cstdlib>
#include <ctime>
#include <iostream>
using namespace std;

#include <getopt.h>

extern "C"
{
#  include "support.h"
}

#include "window.h"


static const struct option options[] = {
  { "version", no_argument, NULL, 'v' },
  { "code", required_argument, NULL, 'c' },
  { "help", no_argument, NULL, 'h' },
  { NULL, 0, NULL, 0 }
};


static void
showVersion()
{
  cout << _("A sudoku solver/generator program, v" VERSION) << endl
       << sudoku::copyright_notice << endl
       << sudoku::translator_credit << endl;
}


static void
showHelp()
{
  showVersion();
  cout << endl
       << _("Usage: sudoku-savant [options]") << endl
       << _("Options:") << endl
       << _("  -c, --code CODESTRING\tLoad a 9x9 puzzle as a string of 81 digits") << endl
       << _("  -v, --version\t\tShow version information") << endl
       << _("  -h, --help\t\tShow this message") << endl
       << endl
       << _("Sudoku files may also be read from Standard Input.")
       << endl;
}


int
main(int argc, char *argv[])
{
  const char *codestr = "";
  int ret;

#ifdef ENABLE_NLS
  bindtextdomain(GETTEXT_PACKAGE, PACKAGE_LOCALE_DIR);
  bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");
  textdomain(GETTEXT_PACKAGE);
#endif

  gtk_set_locale();
  gtk_init(&argc, &argv);

  add_pixmap_directory(PACKAGE_DATA_DIR "/" PACKAGE "/pixmaps");

  {
    int optindex;
    int opt;

    opterr = 0;
    while ((opt = getopt_long(argc, argv, "c:vh", options, &optindex)) != EOF)
    {
      switch(opt)
      {
      case 'c':
        if (optarg != NULL)
          codestr = optarg;
        break;

      case 'v':
        showVersion();
        return EXIT_SUCCESS;

      case 'h':
        showHelp();
        return EXIT_SUCCESS;

      default:
        cerr << _("Invalid option: ") << static_cast<char>(optopt) << endl;
        return EXIT_FAILURE;
      } /* switch */
    } /* while */
  }

  try
  {
    unsigned seed = time(NULL);
    srandom(seed);

    sudoku::Window window;

    /*
     * Pipe a game from Standard Input directly into the grid.
     */
    if ( (static_cast<long>( cin.tellg() ) == 0) &&
         (cin.peek() != istream::traits_type::eof()) )
    {
      cin >> window;
    }
    else if (*codestr != '\0')
    {
      /*
       * www.sudoku.com shares 3x3 geometry boards as
       * a sequence of 81 characters, so support that too.
       */
      window.load(sudoku::CodeLoader(codestr));
    }

    gtk_main();
    ret = EXIT_SUCCESS;
  }
  catch(const exception &e)
  {
    cerr << _("Exception: ") << e.what() << endl;
    ret = EXIT_FAILURE;
  }
  catch(...)
  {
    cerr << _("Unknown exception") << endl;
    ret = EXIT_FAILURE;
  }

  return ret;
}

